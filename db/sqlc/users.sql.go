// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"
)

const checkoutUpdata = `-- name: checkoutUpdata :many
SELECT id, username, password FROM users WHERE username=$1
`

func (q *Queries) checkoutUpdata(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, checkoutUpdata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUsers = `-- name: createUsers :exec
INSERT INTO users (username, password) VALUES ($1,$2)
`

func (q *Queries) createUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createUsers)
	return err
}

const deleteUsers = `-- name: deleteUsers :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) deleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}
